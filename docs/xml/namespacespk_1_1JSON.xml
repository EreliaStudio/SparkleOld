<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacespk_1_1JSON" kind="namespace" language="C++">
    <compoundname>spk::JSON</compoundname>
    <innerclass refid="classspk_1_1JSON_1_1File" prot="public">spk::JSON::File</innerclass>
    <innerclass refid="classspk_1_1JSON_1_1Object" prot="public">spk::JSON::Object</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="spk__JSON__file_8cpp_1ad8aae6c20a52a35016b719fc8a2eaee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring spk::JSON::_applyGrammar</definition>
        <argsstring>(const std::wstring &amp;p_fileContent)</argsstring>
        <name>_applyGrammar</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_fileContent</declname>
        </param>
        <briefdescription>
<para>Applies grammar rules to the file content to ensure valid JSON syntax. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_fileContent</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the file that will be parsed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::wstring The resulting string after applying grammar rules. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_string.cpp" line="80" column="14" bodyfile="src/miscellaneous/JSON/spk_JSON_file_string.cpp" bodystart="80" bodyend="123" declfile="src/miscellaneous/JSON/spk_JSON_file.cpp" declline="12" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1aeb91577f0dde5363d4762be678864118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring spk::JSON::_extractUnitSubstring</definition>
        <argsstring>(const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_extractUnitSubstring</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Extracts the unit substring from the content at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after the unit substring. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The extracted unit substring. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_string.cpp" line="157" column="14" bodyfile="src/miscellaneous/JSON/spk_JSON_file_string.cpp" bodystart="157" bodyend="192" declfile="src/miscellaneous/JSON/spk_JSON_file.cpp" declline="13" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1aa6347d3b5317696abd2edb90344ef537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring spk::JSON::_getAttributeName</definition>
        <argsstring>(const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_getAttributeName</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Extracts the attribute name from the content at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after the attribute name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The extracted attribute name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_string.cpp" line="131" column="14" bodyfile="src/miscellaneous/JSON/spk_JSON_file_string.cpp" bodystart="131" bodyend="149" declfile="src/miscellaneous/JSON/spk_JSON_file.cpp" declline="14" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a42f96ec573e783030b7617d5aa7a3e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spk::JSON::_loadUnitNumbers</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_loadUnitNumbers</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Loads the unit numbers into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the unit numbers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit substring to load. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_number.cpp" line="110" column="6" bodyfile="src/miscellaneous/JSON/spk_JSON_file_number.cpp" bodystart="110" bodyend="148" declfile="src/miscellaneous/JSON/spk_JSON_file.cpp" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a1b2820e73573552f0233436de02a64ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadContent</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_loadContent</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Loads the JSON content into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the content. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after loading the content. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="180" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="180" bodyend="200" declfile="src/miscellaneous/JSON/spk_JSON_file.cpp" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a09ed8fb8ce1b7e0f213fe0cdd00233cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>static std::wstring spk::JSON::_loadFileContent</definition>
        <argsstring>(const std::filesystem::path &amp;p_filePath)</argsstring>
        <name>_loadFileContent</name>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>p_filePath</declname>
        </param>
        <briefdescription>
<para>Loads the content of the file at the specified path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the JSON file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The loaded content of the file as a wide string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="25" column="21" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a39c9755f0a55c9d2b4da1781f34584e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadUnitString</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_loadUnitString</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Loads the unit string into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the unit string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit substring to load. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="48" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1af265c364fa8fec331832b38ab5613689" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadUnitBoolean</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_loadUnitBoolean</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Loads the unit boolean value into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the unit boolean. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit substring to load. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="58" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1aaaadf438d72e7a46b1b841be4a41d2e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadUnitNull</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_loadUnitNull</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Loads the unit null value into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the unit null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit substring to load. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="73" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a1d7baf43b7fc06b93c0e44f51bb98c8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadUnit</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_loadUnit</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Loads the unit value into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the unit value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after loading the unit value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="87" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="87" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1a1cf5c558ef349afa381e633121a6b2cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadObject</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_loadObject</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Loads the JSON object into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the nested object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after loading the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="119" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="119" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1ad3d813c26626239060b44993d5d66518" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::JSON::_loadArray</definition>
        <argsstring>(spk::JSON::Object &amp;p_objectToFill, const std::wstring &amp;p_content, size_t &amp;p_index)</argsstring>
        <name>_loadArray</name>
        <param>
          <type><ref refid="classspk_1_1JSON_1_1Object" kindref="compound">spk::JSON::Object</ref> &amp;</type>
          <declname>p_objectToFill</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_content</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>p_index</declname>
        </param>
        <briefdescription>
<para>Loads the JSON array into the specified JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_objectToFill</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to fill with the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index in the content string. It will be updated to the index after loading the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="150" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="150" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file_8cpp_1af004f27888d5979f3a73567be1febf1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wostream &amp;</type>
        <definition>std::wostream&amp; spk::JSON::operator&lt;&lt;</definition>
        <argsstring>(std::wostream &amp;p_os, const File &amp;p_file)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::wostream &amp;</type>
          <declname>p_os</declname>
        </param>
        <param>
          <type>const <ref refid="classspk_1_1JSON_1_1File" kindref="compound">File</ref> &amp;</type>
          <declname>p_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream to write the <ref refid="classspk_1_1JSON_1_1File" kindref="compound">File</ref> object to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classspk_1_1JSON_1_1File" kindref="compound">File</ref> object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file.cpp" line="251" column="1" bodyfile="src/miscellaneous/JSON/spk_JSON_file.cpp" bodystart="251" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file__number_8cpp_1ae79cbaf14425da6236527db27bc91b03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool spk::JSON::_isNumberMalformatted</definition>
        <argsstring>(bool p_isNegative, const size_t &amp;p_decimalPos, const size_t &amp;p_exponentPos, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_isNumberMalformatted</name>
        <param>
          <type>bool</type>
          <declname>p_isNegative</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>p_decimalPos</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>p_exponentPos</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Check if the given string is a correct JSON number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_isNegative</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if the number is negative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_decimalPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the decimal point. (std::wstring::npos if there is no decimal point) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_exponentPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the exponent. (std::wstring::npos if there is no exponent) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the string is not a correct JSON number, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_number.cpp" line="23" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file_number.cpp" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file__number_8cpp_1ad9db092fed54d00d46673bdd92af92f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long spk::JSON::_extractExponent</definition>
        <argsstring>(const std::wstring &amp;p_exponentSubstring)</argsstring>
        <name>_extractExponent</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_exponentSubstring</declname>
        </param>
        <briefdescription>
<para>Extracts the number&apos;s exponent from the string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_exponentSubstring</parametername>
</parameternamelist>
<parameterdescription>
<para>The string containing the number&apos;s exponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>long The number&apos;s exponent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_number.cpp" line="43" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file_number.cpp" bodystart="43" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file__number_8cpp_1affc7c86e770d7b901398dd858813692c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool spk::JSON::_resultWillBeDouble</definition>
        <argsstring>(const size_t &amp;p_decimalPos, bool p_hasExponent, const size_t &amp;p_exponentPos, bool p_isNegative, const long &amp;p_exponent)</argsstring>
        <name>_resultWillBeDouble</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>p_decimalPos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>p_hasExponent</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>p_exponentPos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>p_isNegative</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>p_exponent</declname>
        </param>
        <briefdescription>
<para>Check if the string parsed so far will be a real number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_decimalPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the decimal point. (std::wstring::npos if there is no decimal point) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_hasExponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about the number&apos;s exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_exponentPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_isNegative</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the number negative? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The number&apos;s exponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True If the number will be a real number. False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_number.cpp" line="71" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file_number.cpp" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file__number_8cpp_1a07be396c1293ab4d5fc88c919b92bdc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long spk::JSON::_safePowerOfTen</definition>
        <argsstring>(const long &amp;p_number, const long &amp;p_exponent, const std::wstring &amp;p_unitSubString)</argsstring>
        <name>_safePowerOfTen</name>
        <param>
          <type>const long &amp;</type>
          <declname>p_number</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>p_exponent</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_unitSubString</declname>
        </param>
        <briefdescription>
<para>Safely computes the power of ten of the specified number. Checks for any computation error and throws an exception if any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to compute the power of ten of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_unitSubString</parametername>
</parameternamelist>
<parameterdescription>
<para>The stringifyed number used in the exception message if any. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>long The result of the computation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_number.cpp" line="91" column="13" bodyfile="src/miscellaneous/JSON/spk_JSON_file_number.cpp" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__file__string_8cpp_1a8ab85dee6f5266f8361d26974c732195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring spk::JSON::_handleEscapeSequence</definition>
        <argsstring>(const std::wstring &amp;p_fileContent)</argsstring>
        <name>_handleEscapeSequence</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_fileContent</declname>
        </param>
        <briefdescription>
<para>Convert escape sequence such as &apos;\r&apos; to their corresponding character. Also handle universal character name such as &apos;\uXXXX&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_fileContent</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to start from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::wstring The resulting string after handling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_file_string.cpp" line="19" column="14" bodyfile="src/miscellaneous/JSON/spk_JSON_file_string.cpp" bodystart="19" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__object_8cpp_1ae1702a4d5a92120f2feea8326d291c64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>static std::wstring spk::JSON::_cleanUnicodeString</definition>
        <argsstring>(const std::wstring &amp;p_string)</argsstring>
        <name>_cleanUnicodeString</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>p_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_object.cpp" line="145" column="21" bodyfile="src/miscellaneous/JSON/spk_JSON_object.cpp" bodystart="145" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="spk__JSON__object_8cpp_1aadfc3d38cfdebe3a567b67129b07f3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wostream &amp;</type>
        <definition>std::wostream&amp; spk::JSON::operator&lt;&lt;</definition>
        <argsstring>(std::wostream &amp;p_os, const Object &amp;p_object)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::wostream &amp;</type>
          <declname>p_os</declname>
        </param>
        <param>
          <type>const <ref refid="classspk_1_1JSON_1_1Object" kindref="compound">Object</ref> &amp;</type>
          <declname>p_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream to write the <ref refid="classspk_1_1JSON_1_1Object" kindref="compound">Object</ref> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_object</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classspk_1_1JSON_1_1Object" kindref="compound">Object</ref> to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/miscellaneous/JSON/spk_JSON_object.cpp" line="269" column="1" bodyfile="src/miscellaneous/JSON/spk_JSON_object.cpp" bodystart="269" bodyend="284"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="includes/miscellaneous/JSON/spk_JSON_file.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
