<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structspk_1_1IVector2" kind="class" language="C++" prot="public">
    <compoundname>spk::IVector2</compoundname>
    <includes refid="spk__vector2_8hpp" local="no">spk_vector2.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename TType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structspk_1_1IVector2_1a7aef6e160a85e33668c18c5e743127ef" prot="public" static="no" mutable="no">
        <type>TType</type>
        <definition>TType spk::IVector2&lt; TType &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>The x-coordinate of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="28" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structspk_1_1IVector2_1aefc7c3164247217231e53c0b75e21e3b" prot="public" static="no" mutable="no">
        <type>TType</type>
        <definition>TType spk::IVector2&lt; TType &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
<para>The y-coordinate of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="29" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structspk_1_1IVector2_1ad681cb3d88fd9a4ca1e60c3c44e600b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>spk::IVector2&lt; TType &gt;::IVector2</definition>
        <argsstring>()</argsstring>
        <name>IVector2</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a two-dimensional vector with coordinates (0,0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="36" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ae197d470bdc2579bd6434f1d23e569bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>spk::IVector2&lt; TType &gt;::IVector2</definition>
        <argsstring>(const TOtherType &amp;p_value)</argsstring>
        <name>IVector2</name>
        <param>
          <type>const TOtherType &amp;</type>
          <declname>p_value</declname>
        </param>
        <briefdescription>
<para>Constructor that initializes both coordinates with a single value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be used for both coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="43" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a3199f7709d8d15633920c7602b1c1e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>spk::IVector2&lt; TType &gt;::IVector2</definition>
        <argsstring>(const TOtherType &amp;p_x, const TOtherType &amp;p_y)</argsstring>
        <name>IVector2</name>
        <param>
          <type>const TOtherType &amp;</type>
          <declname>p_x</declname>
        </param>
        <param>
          <type>const TOtherType &amp;</type>
          <declname>p_y</declname>
        </param>
        <briefdescription>
<para>Constructor that initializes the vector with two values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be used for the x-coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be used for the y-coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="51" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a4960cc3b4ade5cfd48cd0b78281d179a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>spk::IVector2&lt; TType &gt;::operator IVector2&lt; TOtherType &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator IVector2&lt; TOtherType &gt;</name>
        <briefdescription>
<para>Type-casting operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows an instance of the class to be type-casted to an instance of <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> of another type. <simplesect kind="return"><para>An instance of <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> of the new type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="61" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a9d6df11d0dea89825de285227208b4e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TType &gt;</type>
        <definition>IVector2&lt;TType&gt; spk::IVector2&lt; TType &gt;::operator+</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of + operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to add two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="88" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a93181e2a39090202e764fe87e5a6d1c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TType &gt;</type>
        <definition>IVector2&lt;TType&gt; spk::IVector2&lt; TType &gt;::operator-</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of - operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to subtract two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="101" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a409c7ef14a15f0e7bee9e781ea3f029c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TType &gt;</type>
        <definition>IVector2&lt;TType&gt; spk::IVector2&lt; TType &gt;::operator*</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of * operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to multiply two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="114" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a7d8fac9e93e024514717ef2594724aec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TType &gt;</type>
        <definition>IVector2&lt;TType&gt; spk::IVector2&lt; TType &gt;::operator/</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of / operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to divide two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if an attempt is made to divide by zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="128" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a46f20fbffbe8c392bf857f84f6175c33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spk::IVector2&lt; TType &gt;::operator+=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of += operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to add another <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to this object and assign the result to this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="142" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a96c33ee627ed1700aff6627261a074ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spk::IVector2&lt; TType &gt;::operator-=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of -= operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to subtract another <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> from this object and assign the result to this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="155" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a0609e1b115b35f3293a19e9f1b3aa91c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spk::IVector2&lt; TType &gt;::operator*=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of *= operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to multiply this object by another <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> and assign the result to this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="168" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a8158dcf13f51999650b00e83c36be525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spk::IVector2&lt; TType &gt;::operator/=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of /= operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to divide this object by another <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> and assign the result to this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if an attempt is made to divide by zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="182" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a19a45be30c1cb18600add47dddd15ce1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator==</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;delta) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Overload of == operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects are equal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if both <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="197" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a8a7d7e368595e4a4db1580995d7df6f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator!=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;delta) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Overload of != operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if two <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects are not equal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if both <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects are not equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="210" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a50ee09f391a89938f95501f6f830818d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator&lt;</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of &lt; operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if one <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is less than another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is less than the other, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="223" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ab1b6a3babc24fbb384fde2327590f4ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator&gt;</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of &gt; operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if one <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is greater than another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is greater than the other, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="240" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="240" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ae1604ed3d5d9945e9183396dc976d906" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator&lt;=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of &lt;= operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if one <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is less than or equal to another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is less than or equal to the other, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="257" column="9" bodyfile="includes/math/spk_vector2.hpp" bodystart="257" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1acd97e47a3bfd966a412f9520c98748d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool spk::IVector2&lt; TType &gt;::operator&gt;=</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Overload of &gt;= operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to compare if one <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is greater than or equal to another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object is greater than or equal to the other, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="274" column="14" bodyfile="includes/math/spk_vector2.hpp" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1aa0d0c755988c4ce9ec8e86e1744d997e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float spk::IVector2&lt; TType &gt;::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Calculates the norm (or length) of this vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the Euclidean norm (also known as the L2 norm) of this vector, which is the square root of the sum of the squares of the coordinates. <simplesect kind="return"><para>The norm of the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="289" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1abf3cb20ecff4c986f8a7d602e89623a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float spk::IVector2&lt; TType &gt;::distance</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Calculates the Euclidean distance between this vector and another vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the Euclidean distance (or L2 distance) between this vector and another vector. The Euclidean distance is the square root of the sum of the squares of differences in each coordinate. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the other vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to compute the distance to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euclidean distance between this vector and the other vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="303" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a6bc80581ee0fb7ce5f10b751b85fa0cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; float &gt;</type>
        <definition>IVector2&lt;float&gt; spk::IVector2&lt; TType &gt;::normalize</definition>
        <argsstring>() const</argsstring>
        <name>normalize</name>
        <briefdescription>
<para>Normalizes this vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method normalizes this vector by dividing each coordinate by the norm of the vector. The resulting vector has a norm of 1. If the norm of the vector is zero, a runtime error is thrown. <simplesect kind="return"><para>The normalized vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the norm of the vector is zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="315" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="315" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a4d5cc1aceeca9b90fcecf6d6fe49520d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>IVector2 spk::IVector2&lt; TType &gt;::cross</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other=IVector2(0, 0)) const</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
          <defval><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>(0, 0)</defval>
        </param>
        <briefdescription>
<para>Performs the 2D cross product with another vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the 2D cross product of this vector with another vector. The result is a new vector. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the other vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to compute the cross product with. Defaults to a zero vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cross product of this vector and the other vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="334" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="334" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a6ab6d332aa26f3da116169b39014f113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float spk::IVector2&lt; TType &gt;::crossZ</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other) const</argsstring>
        <name>crossZ</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
<para>Calculates the z-component of the cross product with another vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the z-component of the 2D cross product of this vector with another vector. The result is a scalar. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the other vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to compute the cross product with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The z-component of the cross product of this vector and the other vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="352" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a5b615184fb3c906955819e01958102bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float spk::IVector2&lt; TType &gt;::dot</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other, const IVector2&lt; TOtherType &gt; &amp;p_center=IVector2(0, 0)) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_center</declname>
          <defval><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>(0, 0)</defval>
        </param>
        <briefdescription>
<para>Performs the dot product with another vector, with respect to a center vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the dot product of this vector with another vector, with respect to a center vector. The result is a scalar. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the other vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to compute the dot product with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object. Defaults to a zero vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of this vector and the other vector, with respect to the center vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="367" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="367" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a4c3925ad849ad4d9b1bdba9a8c0d879c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float spk::IVector2&lt; TType &gt;::angle</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_other, const IVector2&lt; TOtherType &gt; &amp;p_center=IVector2(0, 0)) const</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_other</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_center</declname>
          <defval><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>(0, 0)</defval>
        </param>
        <briefdescription>
<para>Calculates the angle between this vector and another vector, with respect to a center vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the angle in degrees between this vector and another vector, with respect to a center vector. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the other vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to compute the angle to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object. Defaults to a zero vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle in degrees between this vector and the other vector, with respect to the center vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="386" column="15" bodyfile="includes/math/spk_vector2.hpp" bodystart="386" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a94bb60fe03d90225da1337147ac4bb72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>IVector2 spk::IVector2&lt; TType &gt;::invert</definition>
        <argsstring>() const</argsstring>
        <name>invert</name>
        <briefdescription>
<para>Inverts this vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method inverts this vector by multiplying each coordinate by -1. The result is a new vector pointing in the opposite direction. <simplesect kind="return"><para>The inverted vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="404" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="404" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a2a657d838bdfcbb18dd0309977d34d5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TOtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>IVector2 spk::IVector2&lt; TType &gt;::rotate</definition>
        <argsstring>(const IVector2&lt; TOtherType &gt; &amp;p_center, const float &amp;p_angle) const</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref>&lt; TOtherType &gt; &amp;</type>
          <declname>p_center</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>p_angle</declname>
        </param>
        <briefdescription>
<para>Rotates this vector around a given center point. </para>
        </briefdescription>
        <detaileddescription>
<para>This method rotates this vector around a given center point by a specified angle. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOtherType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the center vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_center</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object that serves as the rotation center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle in degrees by which to rotate the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The rotated vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="419" column="18" bodyfile="includes/math/spk_vector2.hpp" bodystart="419" bodyend="431"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structspk_1_1IVector2_1a0ad00eba4b802fae1acede9ef72d21bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::wostream &amp;</type>
        <definition>std::wostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::wostream &amp;p_os, const IVector2 &amp;p_self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::wostream &amp;</type>
          <declname>p_os</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_self</declname>
        </param>
        <briefdescription>
<para>Overload of &lt;&lt; operator for output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator is used to output the content of an <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="74" column="16" bodyfile="includes/math/spk_vector2.hpp" bodystart="74" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structspk_1_1IVector2_1af58b4937f57ec150690b653144e627f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::floor</definition>
        <argsstring>(const IVector2 &amp;p_vector)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_vector</declname>
        </param>
        <briefdescription>
<para>Rounds down the coordinates of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method rounds down the coordinates of a given <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be rounded down. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector with rounded down coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="440" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="440" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ac22c9a8609ce9b7f2215eff7c120ed0c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::ceiling</definition>
        <argsstring>(const IVector2 &amp;p_vector)</argsstring>
        <name>ceiling</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_vector</declname>
        </param>
        <briefdescription>
<para>Rounds up the coordinates of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method rounds up the coordinates of a given <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be rounded up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector with rounded up coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="457" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="457" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a173f7d72b11d82a87db01e6a6dfe625e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::round</definition>
        <argsstring>(const IVector2 &amp;p_vector)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_vector</declname>
        </param>
        <briefdescription>
<para>Rounds the coordinates of a vector to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method rounds the coordinates of a given <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object to the nearest integer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be rounded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector with rounded coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="474" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="474" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ae64ebb9cf02e5bbf329ea31d35e29841" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::min</definition>
        <argsstring>(const IVector2 &amp;p_min, const IVector2 &amp;p_max)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_min</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_max</declname>
        </param>
        <briefdescription>
<para>Calculates the vector with the minimum coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object with the minimum coordinates from two given vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector with the minimum coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="492" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a452209253a7a42351fc09951297f7d4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::max</definition>
        <argsstring>(const IVector2 &amp;p_min, const IVector2 &amp;p_max)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_min</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_max</declname>
        </param>
        <briefdescription>
<para>Calculates the vector with the maximum coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calculates the <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object with the maximum coordinates from two given vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector with the maximum coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="505" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1a34fd8293e2ff4b4bfa398dd70d158081" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool spk::IVector2&lt; TType &gt;::isInsideRectangle</definition>
        <argsstring>(const IVector2 &amp;p_point, const IVector2 &amp;p_cornerA, const IVector2 &amp;p_cornerB)</argsstring>
        <name>isInsideRectangle</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_point</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_cornerA</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_cornerB</declname>
        </param>
        <briefdescription>
<para>Checks if a point is inside a rectangle defined by two corner points. </para>
        </briefdescription>
        <detaileddescription>
<para>This method checks if a given point (as an <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> object) is inside a rectangle defined by two corner points (as <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> objects). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cornerA</parametername>
</parameternamelist>
<parameterdescription>
<para>The first corner point of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cornerB</parametername>
</parameternamelist>
<parameterdescription>
<para>The second corner point of the rectangle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the point is inside the rectangle, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="519" column="21" bodyfile="includes/math/spk_vector2.hpp" bodystart="519" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="structspk_1_1IVector2_1ae564274f20ad50bb14dc2d34806cdec4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref></type>
        <definition>static IVector2 spk::IVector2&lt; TType &gt;::lerp</definition>
        <argsstring>(const IVector2 &amp;p_startingPoint, const IVector2 &amp;p_endingPoint, float t)</argsstring>
        <name>lerp</name>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_startingPoint</declname>
        </param>
        <param>
          <type>const <ref refid="structspk_1_1IVector2" kindref="compound">IVector2</ref> &amp;</type>
          <declname>p_endingPoint</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Interpolates linearly between two points. </para>
        </briefdescription>
        <detaileddescription>
<para>This method performs a linear interpolation between two points, creating a smooth transition from the starting point to the ending point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_startingPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point for the interpolation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_endingPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending point for the interpolation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter, ranging from 0 (start point) to 1 (end point). For values outside this range, the function extrapolates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_vector2.hpp" line="539" column="25" bodyfile="includes/math/spk_vector2.hpp" bodystart="539" bodyend="544"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A two-dimensional vector class with variable type. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a two-dimensional vector. It provides a number of methods for vector operations. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type used for vector coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="includes/math/spk_vector2.hpp" line="26" column="5" bodyfile="includes/math/spk_vector2.hpp" bodystart="27" bodyend="545"/>
    <listofallmembers>
      <member refid="structspk_1_1IVector2_1a4c3925ad849ad4d9b1bdba9a8c0d879c" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>angle</name></member>
      <member refid="structspk_1_1IVector2_1ac22c9a8609ce9b7f2215eff7c120ed0c" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>ceiling</name></member>
      <member refid="structspk_1_1IVector2_1a4d5cc1aceeca9b90fcecf6d6fe49520d" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>cross</name></member>
      <member refid="structspk_1_1IVector2_1a6ab6d332aa26f3da116169b39014f113" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>crossZ</name></member>
      <member refid="structspk_1_1IVector2_1abf3cb20ecff4c986f8a7d602e89623a2" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>distance</name></member>
      <member refid="structspk_1_1IVector2_1a5b615184fb3c906955819e01958102bc" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>dot</name></member>
      <member refid="structspk_1_1IVector2_1af58b4937f57ec150690b653144e627f2" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>floor</name></member>
      <member refid="structspk_1_1IVector2_1a94bb60fe03d90225da1337147ac4bb72" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>invert</name></member>
      <member refid="structspk_1_1IVector2_1a34fd8293e2ff4b4bfa398dd70d158081" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>isInsideRectangle</name></member>
      <member refid="structspk_1_1IVector2_1ad681cb3d88fd9a4ca1e60c3c44e600b6" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>IVector2</name></member>
      <member refid="structspk_1_1IVector2_1ae197d470bdc2579bd6434f1d23e569bc" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>IVector2</name></member>
      <member refid="structspk_1_1IVector2_1a3199f7709d8d15633920c7602b1c1e55" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>IVector2</name></member>
      <member refid="structspk_1_1IVector2_1ae564274f20ad50bb14dc2d34806cdec4" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>lerp</name></member>
      <member refid="structspk_1_1IVector2_1a452209253a7a42351fc09951297f7d4d" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>max</name></member>
      <member refid="structspk_1_1IVector2_1ae64ebb9cf02e5bbf329ea31d35e29841" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>min</name></member>
      <member refid="structspk_1_1IVector2_1aa0d0c755988c4ce9ec8e86e1744d997e" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>norm</name></member>
      <member refid="structspk_1_1IVector2_1a6bc80581ee0fb7ce5f10b751b85fa0cb" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>normalize</name></member>
      <member refid="structspk_1_1IVector2_1a4960cc3b4ade5cfd48cd0b78281d179a" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator IVector2&lt; TOtherType &gt;</name></member>
      <member refid="structspk_1_1IVector2_1a8a7d7e368595e4a4db1580995d7df6f6" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator!=</name></member>
      <member refid="structspk_1_1IVector2_1a409c7ef14a15f0e7bee9e781ea3f029c" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator*</name></member>
      <member refid="structspk_1_1IVector2_1a0609e1b115b35f3293a19e9f1b3aa91c" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator*=</name></member>
      <member refid="structspk_1_1IVector2_1a9d6df11d0dea89825de285227208b4e8" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator+</name></member>
      <member refid="structspk_1_1IVector2_1a46f20fbffbe8c392bf857f84f6175c33" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator+=</name></member>
      <member refid="structspk_1_1IVector2_1a93181e2a39090202e764fe87e5a6d1c5" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator-</name></member>
      <member refid="structspk_1_1IVector2_1a96c33ee627ed1700aff6627261a074ac" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator-=</name></member>
      <member refid="structspk_1_1IVector2_1a7d8fac9e93e024514717ef2594724aec" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator/</name></member>
      <member refid="structspk_1_1IVector2_1a8158dcf13f51999650b00e83c36be525" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator/=</name></member>
      <member refid="structspk_1_1IVector2_1a50ee09f391a89938f95501f6f830818d" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator&lt;</name></member>
      <member refid="structspk_1_1IVector2_1a0ad00eba4b802fae1acede9ef72d21bd" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator&lt;&lt;</name></member>
      <member refid="structspk_1_1IVector2_1ae1604ed3d5d9945e9183396dc976d906" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator&lt;=</name></member>
      <member refid="structspk_1_1IVector2_1a19a45be30c1cb18600add47dddd15ce1" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator==</name></member>
      <member refid="structspk_1_1IVector2_1ab1b6a3babc24fbb384fde2327590f4ef" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator&gt;</name></member>
      <member refid="structspk_1_1IVector2_1acd97e47a3bfd966a412f9520c98748d1" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>operator&gt;=</name></member>
      <member refid="structspk_1_1IVector2_1a2a657d838bdfcbb18dd0309977d34d5b" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>rotate</name></member>
      <member refid="structspk_1_1IVector2_1a173f7d72b11d82a87db01e6a6dfe625e" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>round</name></member>
      <member refid="structspk_1_1IVector2_1a7aef6e160a85e33668c18c5e743127ef" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>x</name></member>
      <member refid="structspk_1_1IVector2_1aefc7c3164247217231e53c0b75e21e3b" prot="public" virt="non-virtual"><scope>spk::IVector2</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
