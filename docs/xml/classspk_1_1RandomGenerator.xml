<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classspk_1_1RandomGenerator" kind="class" language="C++" prot="public">
    <compoundname>spk::RandomGenerator</compoundname>
    <includes refid="spk__random__generator_8hpp" local="no">spk_random_generator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename TGeneratedType</type>
        <defval>int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classspk_1_1RandomGenerator_1a7f7fb30deb532ed8bcd3b7f4951e4a96" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_same&lt; TGeneratedType, double &gt;::value||std::is_same&lt; TGeneratedType, float &gt;::value, std::uniform_real_distribution&lt; TGeneratedType &gt;, std::uniform_int_distribution&lt; TGeneratedType &gt; &gt;::type</type>
        <definition>using spk::RandomGenerator&lt; TGeneratedType &gt;::GeneratorType =  typename std::conditional&lt; std::is_same&lt;TGeneratedType, double&gt;::value || std::is_same&lt;TGeneratedType, float&gt;::value, std::uniform_real_distribution&lt;TGeneratedType&gt;, std::uniform_int_distribution&lt;TGeneratedType&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>GeneratorType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="15" column="1" bodyfile="includes/math/spk_random_generator.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classspk_1_1RandomGenerator_1a4ce4787cdfb46a1caeeb7e2fbdcef836" prot="private" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 spk::RandomGenerator&lt; TGeneratedType &gt;::_generator</definition>
        <argsstring></argsstring>
        <name>_generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="21" column="14" bodyfile="includes/math/spk_random_generator.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspk_1_1RandomGenerator_1a2d0b1d47c777629b85256b692034ac28" prot="private" static="no" mutable="no">
        <type>GeneratorType</type>
        <definition>GeneratorType spk::RandomGenerator&lt; TGeneratedType &gt;::_distribution</definition>
        <argsstring></argsstring>
        <name>_distribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="22" column="15" bodyfile="includes/math/spk_random_generator.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a11a3b5f092c4f4da26ee3826ac101a3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>spk::RandomGenerator&lt; TGeneratedType &gt;::RandomGenerator</definition>
        <argsstring>()</argsstring>
        <name>RandomGenerator</name>
        <briefdescription>
<para>Default constructor. Initializes the generator with a random seed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="28" column="1" bodyfile="includes/math/spk_random_generator.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a39ad642be13a0843ae45355143ebd487" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>spk::RandomGenerator&lt; TGeneratedType &gt;::RandomGenerator</definition>
        <argsstring>(const uint64_t &amp;p_seed)</argsstring>
        <name>RandomGenerator</name>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>p_seed</declname>
        </param>
        <briefdescription>
<para>Constructor that allows to set the seed manually. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed for the random number generator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="37" column="1" bodyfile="includes/math/spk_random_generator.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a301e58954bd4d01521de6d80c9fa1690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>spk::RandomGenerator&lt; TGeneratedType &gt;::RandomGenerator</definition>
        <argsstring>(const RandomGenerator &amp;p_other)=delete</argsstring>
        <name>RandomGenerator</name>
        <param>
          <type>const <ref refid="classspk_1_1RandomGenerator" kindref="compound">RandomGenerator</ref> &amp;</type>
          <declname>p_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a4ed12a6d2b9b97491381fe2a802e618d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void spk::RandomGenerator&lt; TGeneratedType &gt;::setDistributionRange</definition>
        <argsstring>(const TGeneratedType &amp;p_min, const TGeneratedType &amp;p_max)</argsstring>
        <name>setDistributionRange</name>
        <param>
          <type>const TGeneratedType &amp;</type>
          <declname>p_min</declname>
        </param>
        <param>
          <type>const TGeneratedType &amp;</type>
          <declname>p_max</declname>
        </param>
        <briefdescription>
<para>Set the range of the distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the distribution range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the distribution range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="50" column="6" bodyfile="includes/math/spk_random_generator.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a94f0dd891c00eb7fe9a195ede548d8fe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr TGeneratedType</type>
        <definition>constexpr TGeneratedType spk::RandomGenerator&lt; TGeneratedType &gt;::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <briefdescription>
<para>Generate a random number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A random number within the set distribution range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="59" column="26" bodyfile="includes/math/spk_random_generator.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1a873244e578c872984ca815e396eaabb1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr TGeneratedType</type>
        <definition>constexpr TGeneratedType spk::RandomGenerator&lt; TGeneratedType &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
<para>Get the minimum value of the distribution range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The minimum value of the distribution range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="65" column="26" bodyfile="includes/math/spk_random_generator.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1RandomGenerator_1ac64780f71057a7db7f87a90033d99a29" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr TGeneratedType</type>
        <definition>constexpr TGeneratedType spk::RandomGenerator&lt; TGeneratedType &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
<para>Get the maximum value of the distribution range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum value of the distribution range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/math/spk_random_generator.hpp" line="71" column="26" bodyfile="includes/math/spk_random_generator.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Random number generator template class. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TGeneratedType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of integer to generate (default: int). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="includes/math/spk_random_generator.hpp" line="12" column="1" bodyfile="includes/math/spk_random_generator.hpp" bodystart="13" bodyend="72"/>
    <listofallmembers>
      <member refid="classspk_1_1RandomGenerator_1a2d0b1d47c777629b85256b692034ac28" prot="private" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>_distribution</name></member>
      <member refid="classspk_1_1RandomGenerator_1a4ce4787cdfb46a1caeeb7e2fbdcef836" prot="private" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>_generator</name></member>
      <member refid="classspk_1_1RandomGenerator_1a7f7fb30deb532ed8bcd3b7f4951e4a96" prot="private" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>GeneratorType</name></member>
      <member refid="classspk_1_1RandomGenerator_1ac64780f71057a7db7f87a90033d99a29" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>max</name></member>
      <member refid="classspk_1_1RandomGenerator_1a873244e578c872984ca815e396eaabb1" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>min</name></member>
      <member refid="classspk_1_1RandomGenerator_1a94f0dd891c00eb7fe9a195ede548d8fe" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classspk_1_1RandomGenerator_1a11a3b5f092c4f4da26ee3826ac101a3f" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classspk_1_1RandomGenerator_1a39ad642be13a0843ae45355143ebd487" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classspk_1_1RandomGenerator_1a301e58954bd4d01521de6d80c9fa1690" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classspk_1_1RandomGenerator_1a4ed12a6d2b9b97491381fe2a802e618d" prot="public" virt="non-virtual"><scope>spk::RandomGenerator</scope><name>setDistributionRange</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
