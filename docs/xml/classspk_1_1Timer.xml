<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classspk_1_1Timer" kind="class" language="C++" prot="public">
    <compoundname>spk::Timer</compoundname>
    <includes refid="spk__timer_8hpp" local="no">spk_timer.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0" prot="public" static="no" strong="yes">
        <type></type>
        <name>State</name>
        <enumvalue id="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0ae599161956d626eda4cb0a5ffb85271c" prot="public">
          <name>Idle</name>
          <briefdescription>
<para><ref refid="classspk_1_1Timer" kindref="compound">Timer</ref> is idle (not running and not timed out). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0a5bda814c4aedb126839228f1a3d92f09" prot="public">
          <name>Running</name>
          <briefdescription>
<para><ref refid="classspk_1_1Timer" kindref="compound">Timer</ref> is currently running. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0ac85a251cc457840f1e032f1b733e9398" prot="public">
          <name>Timeout</name>
          <briefdescription>
<para><ref refid="classspk_1_1Timer" kindref="compound">Timer</ref> has timed out. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum class to represent the state of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum class has three states: Idle, Running, and Timeout. The timer is in the Idle state by default, changes to Running when it starts, and goes to Timeout when the duration has passed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="26" column="1" bodyfile="includes/system/spk_timer.hpp" bodystart="27" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classspk_1_1Timer_1a61d4eb50a10a038ff971abb5e571782e" prot="private" static="no" mutable="no">
        <type>long long</type>
        <definition>long long spk::Timer::_duration</definition>
        <argsstring></argsstring>
        <name>_duration</name>
        <briefdescription>
<para>The duration of the timer in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This variable is used to store the duration of the timer, which is set by the user when creating the timer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="40" column="11" bodyfile="includes/system/spk_timer.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspk_1_1Timer_1a4bac5aabb5359a39cd1f728c61929562" prot="private" static="no" mutable="yes">
        <type><ref refid="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0" kindref="member">State</ref></type>
        <definition>State spk::Timer::_status</definition>
        <argsstring></argsstring>
        <name>_status</name>
        <briefdescription>
<para>The current state of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This variable is used to store the current state of the timer, which can be Idle, Running, or Timeout. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="48" column="15" bodyfile="includes/system/spk_timer.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspk_1_1Timer_1a1572574e86018d51d124b49425568d40" prot="private" static="no" mutable="no">
        <type>long long</type>
        <definition>long long spk::Timer::_startTime</definition>
        <argsstring></argsstring>
        <name>_startTime</name>
        <briefdescription>
<para>The time the timer started. </para>
        </briefdescription>
        <detaileddescription>
<para>This variable is used to record the time at which the timer starts. It is recorded in milliseconds since some fixed point in time (often system startup). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="56" column="11" bodyfile="includes/system/spk_timer.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspk_1_1Timer_1a407d0e659a442be8f81043fc05d14982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>spk::Timer::Timer</definition>
        <argsstring>()</argsstring>
        <name>Timer</name>
        <briefdescription>
<para>Construct a new <ref refid="classspk_1_1Timer" kindref="compound">Timer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default constructor for the <ref refid="classspk_1_1Timer" kindref="compound">Timer</ref> class. It initializes the duration and start time to zero, and the status to Idle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1aae49033702e6ef1875b4517a969bcc07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spk::Timer::setDuration</definition>
        <argsstring>(const long long &amp;p_duration)</argsstring>
        <name>setDuration</name>
        <param>
          <type>const long long &amp;</type>
          <declname>p_duration</declname>
        </param>
        <briefdescription>
<para>Sets the duration of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the duration of the timer to the specified value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration of the timer in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="74" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1ad57b7897092566299295a3617851926e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const long long &amp;</type>
        <definition>const long long&amp; spk::Timer::totalDuration</definition>
        <argsstring>() const</argsstring>
        <name>totalDuration</name>
        <briefdescription>
<para>Get the total duration of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the total duration of the timer.</para>
<para><simplesect kind="return"><para>The total duration of the timer in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="83" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1ac07058690788556b47491f9fbbd6b83e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long spk::Timer::remainingDuration</definition>
        <argsstring>() const</argsstring>
        <name>remainingDuration</name>
        <briefdescription>
<para>Get the remaining duration of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the remaining duration of the timer, calculated as the total duration minus the elapsed time since the timer started.</para>
<para><simplesect kind="return"><para>The remaining duration of the timer in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="93" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1afcf2bb414ce8bff18b7642f392f0c3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spk::Timer::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
<para>Starts the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function starts the timer by recording the current time as the start time and changing the status to Running. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="101" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1af7da190802d2bc83ca2608b609d7806e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spk::Timer::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stops the timer and changes the status to Idle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="108" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1a94f43a369515d38d221cc6ab75d244fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0" kindref="member">State</ref> &amp;</type>
        <definition>const State&amp; spk::Timer::status</definition>
        <argsstring>() const</argsstring>
        <name>status</name>
        <briefdescription>
<para>Get the status of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the current status of the timer, which can be Idle, Running, or Timeout.</para>
<para><simplesect kind="return"><para>The current status of the timer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="117" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Timer_1ac2ec1670d0e9e6b00f2b5504b4227740" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool spk::Timer::isRunning</definition>
        <argsstring>() const</argsstring>
        <name>isRunning</name>
        <briefdescription>
<para>Check if thetimer is running. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the timer is currently running by checking if the status is Running.</para>
<para><simplesect kind="return"><para>True if the timer is running, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/system/spk_timer.hpp" line="126" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for creating and managing a timer. </para>
    </briefdescription>
    <detaileddescription>
<para>This class allows you to create a timer with a specified duration. The timer can be started, stopped, and checked for its status. </para>
    </detaileddescription>
    <location file="includes/system/spk_timer.hpp" line="15" column="1" bodyfile="includes/system/spk_timer.hpp" bodystart="16" bodyend="127"/>
    <listofallmembers>
      <member refid="classspk_1_1Timer_1a61d4eb50a10a038ff971abb5e571782e" prot="private" virt="non-virtual"><scope>spk::Timer</scope><name>_duration</name></member>
      <member refid="classspk_1_1Timer_1a1572574e86018d51d124b49425568d40" prot="private" virt="non-virtual"><scope>spk::Timer</scope><name>_startTime</name></member>
      <member refid="classspk_1_1Timer_1a4bac5aabb5359a39cd1f728c61929562" prot="private" virt="non-virtual"><scope>spk::Timer</scope><name>_status</name></member>
      <member refid="classspk_1_1Timer_1ac2ec1670d0e9e6b00f2b5504b4227740" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>isRunning</name></member>
      <member refid="classspk_1_1Timer_1ac07058690788556b47491f9fbbd6b83e" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>remainingDuration</name></member>
      <member refid="classspk_1_1Timer_1aae49033702e6ef1875b4517a969bcc07" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>setDuration</name></member>
      <member refid="classspk_1_1Timer_1afcf2bb414ce8bff18b7642f392f0c3f2" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>start</name></member>
      <member refid="classspk_1_1Timer_1a68d5c57fd3cd82f4f97fe8a34bc227a0" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>State</name></member>
      <member refid="classspk_1_1Timer_1a94f43a369515d38d221cc6ab75d244fa" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>status</name></member>
      <member refid="classspk_1_1Timer_1af7da190802d2bc83ca2608b609d7806e" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>stop</name></member>
      <member refid="classspk_1_1Timer_1a407d0e659a442be8f81043fc05d14982" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>Timer</name></member>
      <member refid="classspk_1_1Timer_1ad57b7897092566299295a3617851926e" prot="public" virt="non-virtual"><scope>spk::Timer</scope><name>totalDuration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
