<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classspk_1_1Singleton" kind="class" language="C++" prot="public">
    <compoundname>spk::Singleton</compoundname>
    <includes refid="spk__singleton_8hpp" local="no">spk_singleton.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename TType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classspk_1_1Singleton_1a745f66a5489929948d930a09156aec4c" prot="protected" static="yes" mutable="no">
        <type>std::shared_ptr&lt; TType &gt;</type>
        <definition>std::shared_ptr&lt;TType&gt; spk::Singleton&lt; TType &gt;::_instance</definition>
        <argsstring></argsstring>
        <name>_instance</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The shared pointer to the singleton instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/design_pattern/spk_singleton.hpp" line="28" column="39" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classspk_1_1Singleton_1a24d01aa8ba49475d195a492d724d43e1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>spk::Singleton&lt; TType &gt;::Singleton</definition>
        <argsstring>()</argsstring>
        <name>Singleton</name>
        <briefdescription>
<para>Protected constructor. This constructor is protected to prevent direct instantiation of the singleton class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/design_pattern/spk_singleton.hpp" line="24" column="9" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="24" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classspk_1_1Singleton_1ab970838cbc825424436ad64613b20c12" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::shared_ptr&lt; TType &gt;</type>
        <definition>static constexpr std::shared_ptr&lt;TType&gt; spk::Singleton&lt; TType &gt;::instanciate</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>instanciate</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Instantiate the singleton object. This template function creates a new instance of the singleton object if it doesn&apos;t exist. If an instance already exists, it returns the existing instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The types of the arguments to be passed to the constructor of the singleton object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to be passed to the constructor of the singleton object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shared pointer to the singleton instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/design_pattern/spk_singleton.hpp" line="41" column="42" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Singleton_1a5f56bedfe0791cc1cc09d34bb3be382c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::shared_ptr&lt; TType &gt;</type>
        <definition>static constexpr std::shared_ptr&lt;TType&gt; spk::Singleton&lt; TType &gt;::instance</definition>
        <argsstring>()</argsstring>
        <name>instance</name>
        <briefdescription>
<para>Get the singleton instance. This function returns the shared pointer to the singleton instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The shared pointer to the singleton instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/design_pattern/spk_singleton.hpp" line="56" column="42" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classspk_1_1Singleton_1a0fd0698aa7eab7c2a5cfbf11a9ddfad1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spk::Singleton&lt; TType &gt;::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release the singleton instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function releases the singleton instance by resetting the shared pointer to nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/design_pattern/spk_singleton.hpp" line="66" column="21" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classspk_1_1Singleton" kindref="compound">Singleton</ref> class template. </para>
    </briefdescription>
    <detaileddescription>
<para>This class template provides a base implementation for creating singleton objects. It ensures that only one instance of the object is created and provides methods to access and release the instance.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the singleton object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="includes/design_pattern/spk_singleton.hpp" line="17" column="5" bodyfile="includes/design_pattern/spk_singleton.hpp" bodystart="18" bodyend="70"/>
    <listofallmembers>
      <member refid="classspk_1_1Singleton_1a745f66a5489929948d930a09156aec4c" prot="protected" virt="non-virtual"><scope>spk::Singleton</scope><name>_instance</name></member>
      <member refid="classspk_1_1Singleton_1a5f56bedfe0791cc1cc09d34bb3be382c" prot="public" virt="non-virtual"><scope>spk::Singleton</scope><name>instance</name></member>
      <member refid="classspk_1_1Singleton_1ab970838cbc825424436ad64613b20c12" prot="public" virt="non-virtual"><scope>spk::Singleton</scope><name>instanciate</name></member>
      <member refid="classspk_1_1Singleton_1a0fd0698aa7eab7c2a5cfbf11a9ddfad1" prot="public" virt="non-virtual"><scope>spk::Singleton</scope><name>release</name></member>
      <member refid="classspk_1_1Singleton_1a24d01aa8ba49475d195a492d724d43e1" prot="protected" virt="non-virtual"><scope>spk::Singleton</scope><name>Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
